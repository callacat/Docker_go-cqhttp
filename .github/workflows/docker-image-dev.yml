name: Docker-Build-dev

on:
  push:
    # paths:
    #   - '.github\workflows\docker-image-dev.yml'
    #   - 'Dockerfile-dev'
    branches:
      - main
  schedule:
    - cron: '12 3 * * *'  #每天一次

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: getDev
      id: dev
      run: |
        LATEST_RUN_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://github.com/Mrs4s/go-cqhttp/actions/workflows/ci.yml | grep -o -E 'https://github.com/Mrs4s/go-cqhttp/actions/runs/[0-9]+' | head -n 1)
        echo $LATEST_RUN_URL

        # 根据运行链接获取 Artifacts 下载链接
        ARTIFACT_FILTER='/artifacts/[0-9]+'
        ARTIFACTS_URLS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${LATEST_RUN_URL}" | grep -o -E 'https://github.com/Mrs4s/go-cqhttp/suites/[0-9]+/artifacts/[0-9]+' | grep -E "${ARTIFACT_FILTER}")
        echo $ARTIFACTS_URLS
        # 判断是否获取到了 Artifacts 下载链接
        if [ -n "${ARTIFACTS_URLS}" ]; then
          # 如果获取到了下载链接，则遍历链接列表进行下载和解压
          for url in ${ARTIFACTS_URLS}; do
            filename=$(echo "${url}" | awk -F/ '{print $(NF-1)}')
            mkdir -p artifacts # 确保 artifacts 目录存在
            curl -L -o "artifacts/${filename}.zip" "${url}" # 下载 Artifact
            unzip -o "artifacts/${filename}.zip" -d "artifacts/${filename}" # 解压 Artifact
            rm -f "artifacts/${filename}.zip" # 清理 Artifact 压缩包
            echo "url=true" >> GITHUB_OUTPUT
          done
        else
          # 如果没有获取到下载链接，则输出错误信息并退出脚本
          echo "No Artifacts URLs found." >&2
          echo "url=false" >> GITHUB_OUTPUT
          exit 1
        fi

    - name: Login to DockerHub
      if: ${{ steps.dev.outputs.url == 'true' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      if: ${{ steps.dev.outputs.url == 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile-dev
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
            ${{ secrets.DOCKER_USERNAME }}/gocqhttp:dev